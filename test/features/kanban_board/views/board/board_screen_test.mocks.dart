// Mocks generated by Mockito 5.4.4 from annotations
// in kanban_board/test/features/kanban_board/views/board/board_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:flutter_bloc/flutter_bloc.dart' as _i7;
import 'package:kanban_board/features/kanban_board/data/models/kanban_column_data.dart'
    as _i4;
import 'package:kanban_board/features/kanban_board/data/models/task.dart'
    as _i6;
import 'package:kanban_board/features/kanban_board/domain/cubit/kanban_cubit.dart'
    as _i2;
import 'package:kanban_board/features/task_management/domain/cubit/task_management_cubit.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeKanbanState_0 extends _i1.SmartFake implements _i2.KanbanState {
  _FakeKanbanState_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTaskManagementState_1 extends _i1.SmartFake
    implements _i3.TaskManagementState {
  _FakeTaskManagementState_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [KanbanCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockKanbanCubit extends _i1.Mock implements _i2.KanbanCubit {
  MockKanbanCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i4.KanbanColumnData> get columnDataList => (super.noSuchMethod(
        Invocation.getter(#columnDataList),
        returnValue: <_i4.KanbanColumnData>[],
      ) as List<_i4.KanbanColumnData>);

  @override
  set columnDataList(List<_i4.KanbanColumnData>? _columnDataList) =>
      super.noSuchMethod(
        Invocation.setter(
          #columnDataList,
          _columnDataList,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.KanbanState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeKanbanState_0(
          this,
          Invocation.getter(#state),
        ),
      ) as _i2.KanbanState);

  @override
  _i5.Stream<_i2.KanbanState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i5.Stream<_i2.KanbanState>.empty(),
      ) as _i5.Stream<_i2.KanbanState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  _i5.Future<void> fetchTasks(String? projectId) => (super.noSuchMethod(
        Invocation.method(
          #fetchTasks,
          [projectId],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void filterTasks(List<_i6.Task>? tasks) => super.noSuchMethod(
        Invocation.method(
          #filterTasks,
          [tasks],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i2.KanbanState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i7.Change<_i2.KanbanState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [TaskManagementCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskManagementCubit extends _i1.Mock
    implements _i3.TaskManagementCubit {
  MockTaskManagementCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.TaskStatus get selectedStatus => (super.noSuchMethod(
        Invocation.getter(#selectedStatus),
        returnValue: _i6.TaskStatus.todo,
      ) as _i6.TaskStatus);

  @override
  set selectedStatus(_i6.TaskStatus? _selectedStatus) => super.noSuchMethod(
        Invocation.setter(
          #selectedStatus,
          _selectedStatus,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set taskTitle(String? _taskTitle) => super.noSuchMethod(
        Invocation.setter(
          #taskTitle,
          _taskTitle,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set taskContent(String? _taskContent) => super.noSuchMethod(
        Invocation.setter(
          #taskContent,
          _taskContent,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set taskDuration(int? _taskDuration) => super.noSuchMethod(
        Invocation.setter(
          #taskDuration,
          _taskDuration,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get isCompleted => (super.noSuchMethod(
        Invocation.getter(#isCompleted),
        returnValue: false,
      ) as bool);

  @override
  set isCompleted(bool? _isCompleted) => super.noSuchMethod(
        Invocation.setter(
          #isCompleted,
          _isCompleted,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.TaskManagementState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeTaskManagementState_1(
          this,
          Invocation.getter(#state),
        ),
      ) as _i3.TaskManagementState);

  @override
  _i5.Stream<_i3.TaskManagementState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i5.Stream<_i3.TaskManagementState>.empty(),
      ) as _i5.Stream<_i3.TaskManagementState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  _i5.Future<void> createTask(_i6.Task? task) => (super.noSuchMethod(
        Invocation.method(
          #createTask,
          [task],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> updateTask(_i6.Task? task) => (super.noSuchMethod(
        Invocation.method(
          #updateTask,
          [task],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void selectTaskStatus(_i6.TaskStatus? taskStatus) => super.noSuchMethod(
        Invocation.method(
          #selectTaskStatus,
          [taskStatus],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i3.TaskManagementState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i7.Change<_i3.TaskManagementState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}
